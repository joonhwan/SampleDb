// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SampleDb.Chinook.PostgreSQL;

#nullable disable

namespace SampleDb.Chinook.PostgreSQL.Migrations
{
    [DbContext(typeof(PostgresChinookContext))]
    [Migration("20220821032958_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SampleDb.Chinook.Entities.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("album_id");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("title");

                    b.HasKey("AlbumId")
                        .HasName("pk_albums");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_albums_artist_id");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArtistId"));

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("ArtistId")
                        .HasName("pk_artists");

                    b.ToTable("artists", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("company");

                    b.Property<string>("Country")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("fax");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("state");

                    b.Property<int?>("SupportRepId")
                        .HasColumnType("integer")
                        .HasColumnName("support_rep_id");

                    b.HasKey("CustomerId")
                        .HasName("pk_customers");

                    b.HasIndex("SupportRepId")
                        .HasDatabaseName("ix_customers_support_rep_id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("City")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("fax");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code");

                    b.Property<int?>("ReportsTo")
                        .HasColumnType("integer")
                        .HasColumnName("reports_to");

                    b.Property<string>("State")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.HasKey("EmployeeId")
                        .HasName("pk_employees");

                    b.HasIndex("ReportsTo")
                        .HasDatabaseName("ix_employees_reports_to");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("GenreId")
                        .HasName("pk_genres");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("billing_address");

                    b.Property<string>("BillingCity")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("billing_city");

                    b.Property<string>("BillingCountry")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("billing_country");

                    b.Property<string>("BillingPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("billing_postal_code");

                    b.Property<string>("BillingState")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("billing_state");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invoice_date");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total");

                    b.HasKey("InvoiceId")
                        .HasName("pk_invoices");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_invoices_customer_id");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.InvoiceLine", b =>
                {
                    b.Property<int>("InvoiceLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("invoice_line_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceLineId"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("TrackId")
                        .HasColumnType("integer")
                        .HasColumnName("track_id");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("InvoiceLineId")
                        .HasName("pk_invoice_lines");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_invoice_lines_invoice_id");

                    b.HasIndex("TrackId")
                        .HasDatabaseName("ix_invoice_lines_track_id");

                    b.ToTable("invoice_lines", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("media_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MediaTypeId"));

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("MediaTypeId")
                        .HasName("pk_media_types");

                    b.ToTable("media_types", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("playlist_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlaylistId"));

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.HasKey("PlaylistId")
                        .HasName("pk_playlists");

                    b.ToTable("playlists", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.PlaylistTrack", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer")
                        .HasColumnName("playlist_id");

                    b.Property<int>("TrackId")
                        .HasColumnType("integer")
                        .HasColumnName("track_id");

                    b.HasKey("PlaylistId", "TrackId")
                        .HasName("pk_playlist_track");

                    b.HasIndex("TrackId")
                        .HasDatabaseName("ix_playlist_track_track_id");

                    b.ToTable("playlist_track", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("track_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrackId"));

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer")
                        .HasColumnName("album_id");

                    b.Property<int?>("Bytes")
                        .HasColumnType("integer")
                        .HasColumnName("bytes");

                    b.Property<string>("Composer")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("composer");

                    b.Property<int?>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("media_type_id");

                    b.Property<int>("Milliseconds")
                        .HasColumnType("integer")
                        .HasColumnName("milliseconds");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("TrackId")
                        .HasName("pk_tracks");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_tracks_album_id");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("ix_tracks_genre_id");

                    b.HasIndex("MediaTypeId")
                        .HasDatabaseName("ix_tracks_media_type_id");

                    b.ToTable("tracks", (string)null);
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Album", b =>
                {
                    b.HasOne("SampleDb.Chinook.Entities.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("fk_albums_artists_artist_id");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Customer", b =>
                {
                    b.HasOne("SampleDb.Chinook.Entities.Employee", "SupportRep")
                        .WithMany("Customers")
                        .HasForeignKey("SupportRepId")
                        .HasConstraintName("fk_customers_employees_support_rep_id");

                    b.Navigation("SupportRep");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Employee", b =>
                {
                    b.HasOne("SampleDb.Chinook.Entities.Employee", "EmployeeToBeReported")
                        .WithMany("EmployeesToReport")
                        .HasForeignKey("ReportsTo")
                        .HasConstraintName("fk_employees_employees_employee_to_be_reported_employee_id");

                    b.Navigation("EmployeeToBeReported");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Invoice", b =>
                {
                    b.HasOne("SampleDb.Chinook.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoices_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.InvoiceLine", b =>
                {
                    b.HasOne("SampleDb.Chinook.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_lines_invoices_invoice_id");

                    b.HasOne("SampleDb.Chinook.Entities.Track", "Track")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_lines_tracks_track_id");

                    b.Navigation("Invoice");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.PlaylistTrack", b =>
                {
                    b.HasOne("SampleDb.Chinook.Entities.Playlist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlist_track_playlists_playlist_id");

                    b.HasOne("SampleDb.Chinook.Entities.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlist_track_tracks_track_id");

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Track", b =>
                {
                    b.HasOne("SampleDb.Chinook.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("fk_tracks_albums_album_id");

                    b.HasOne("SampleDb.Chinook.Entities.Genre", "Genre")
                        .WithMany("Tracks")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("fk_tracks_genres_genre_id");

                    b.HasOne("SampleDb.Chinook.Entities.MediaType", "MediaType")
                        .WithMany("Tracks")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tracks_media_types_media_type_id");

                    b.Navigation("Album");

                    b.Navigation("Genre");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Artist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Employee", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("EmployeesToReport");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Genre", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.MediaType", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("SampleDb.Chinook.Entities.Track", b =>
                {
                    b.Navigation("InvoiceLines");
                });
#pragma warning restore 612, 618
        }
    }
}
